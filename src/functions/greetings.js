import bot from './bot.js';
import { getActiveUsersForGreeting } from './users.js';
import database from '../utils/database.js';
import logger from '../utils/logger.js';
import config from '../utils/config.js';

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function generateGreeting(userName) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫
    const today = new Date();
    const monthDay = `${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
    
    if (config.messages.holidays[monthDay]) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        return config.messages.holidays[monthDay].replace('{name}', userName);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    const greetings = config.messages.greetings;
    const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
    const tips = config.messages.tips;
    const randomTip = tips[Math.floor(Math.random() * tips.length)];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const greeting = randomGreeting.replace('{name}', userName);
    return `${greeting}\n\n${randomTip}`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function generateKeyboard() {
    return [
        [
            {
                TEXT: 'üëç –°–ø–∞—Å–∏–±–æ!',
                COMMAND: 'thanks',
                COMMAND_PARAMS: 'morning',
                BG_COLOR: '#29619b',
                TEXT_COLOR: '#ffffff'
            },
            {
                TEXT: 'üìÖ –ú–æ–∏ –∑–∞–¥–∞—á–∏',
                COMMAND: 'tasks',
                COMMAND_PARAMS: 'today',
                BG_COLOR: '#2a9b05',
                TEXT_COLOR: '#ffffff'
            }
        ],
        [
            {
                TEXT: '‚ùì –ü–æ–º–æ—â—å',
                COMMAND: 'help',
                COMMAND_PARAMS: '',
                BG_COLOR: '#555555',
                TEXT_COLOR: '#ffffff'
            }
        ]
    ];
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendGreetingToUser(user) {
    try {
        const userName = user.name || user.first_name || '–ö–æ–ª–ª–µ–≥–∞';
        const message = generateGreeting(userName);
        const keyboard = generateKeyboard();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.sendMessage(user.bitrix_id, message, { keyboard });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        await database.updateLastGreeting(user.bitrix_id);
        
        logger.bot(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${userName} (ID: ${user.bitrix_id})`);
        
        return { success: true, userId: user.bitrix_id };
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name} (${user.bitrix_id}):`, error);
        return { success: false, userId: user.bitrix_id, error: error.message };
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export async function sendMorningGreetings() {
    try {
        logger.info('üåÖ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        await bot.initialize();
        
        if (!bot.botId) {
            throw new Error('–ë–æ—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞.');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        const users = await getActiveUsersForGreeting();
        
        if (users.length === 0) {
            logger.info('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π');
            return {
                total: 0,
                sent: 0,
                errors: 0
            };
        }
        
        logger.info(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π`);
        
        const results = {
            total: users.length,
            sent: 0,
            errors: 0,
            details: []
        };
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
        const batchSize = config.bot.maxUsersPerBatch;
        const delay = config.bot.delayBetweenMessages;
        
        for (let i = 0; i < users.length; i += batchSize) {
            const batch = users.slice(i, i + batchSize);
            
            logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${Math.floor(i / batchSize) + 1} –∏–∑ ${Math.ceil(users.length / batchSize)}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞—Ç—á–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for (const user of batch) {
                const result = await sendGreetingToUser(user);
                results.details.push(result);
                
                if (result.success) {
                    results.sent++;
                } else {
                    results.errors++;
                }
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if (delay > 0) {
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if (i + batchSize < users.length) {
                await new Promise(resolve => setTimeout(resolve, delay * 2));
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const successRate = results.total > 0 
            ? ((results.sent / results.total) * 100).toFixed(2) 
            : 0;
            
        logger.success(`‚úÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!`, {
            total: results.total,
            sent: results.sent,
            errors: results.errors,
            successRate: `${successRate}%`
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
        await saveGreetingStats(results);
        
        return results;
    } catch (error) {
        logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π:', error);
        throw error;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
 */
async function saveGreetingStats(results) {
    try {
        for (const detail of results.details) {
            if (!detail.success && detail.error) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                await database.saveMessageHistory(
                    detail.userId,
                    'Morning greeting',
                    'error',
                    detail.error
                );
            }
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π:', error);
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function sendTestGreeting(userId, customMessage = null) {
    try {
        await bot.initialize();
        
        if (!bot.botId) {
            throw new Error('–ë–æ—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const user = await database.db.get(`
            SELECT * FROM users WHERE bitrix_id = ?
        `, userId);
        
        if (!user) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
        
        const userName = user.name || user.first_name || '–ö–æ–ª–ª–µ–≥–∞';
        const message = customMessage || generateGreeting(userName);
        const keyboard = generateKeyboard();
        
        await bot.sendMessage(userId, message, { keyboard });
        
        logger.success(`–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName} (${userId})`);
        
        return {
            success: true,
            userId,
            userName,
            message
        };
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:`, error);
        throw error;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function sendPersonalizedMessage(userId, messageTemplate, params = {}) {
    try {
        await bot.initialize();
        
        if (!bot.botId) {
            throw new Error('–ë–æ—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
        let message = messageTemplate;
        for (const [key, value] of Object.entries(params)) {
            message = message.replace(new RegExp(`{${key}}`, 'g'), value);
        }
        
        await bot.sendMessage(userId, message);
        
        logger.bot(`–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        
        return {
            success: true,
            userId,
            message
        };
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        throw error;
    }
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function sendBroadcastMessage(message, userFilter = null) {
    try {
        await bot.initialize();
        
        if (!bot.botId) {
            throw new Error('–ë–æ—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
        let query = 'SELECT * FROM users WHERE is_active = 1';
        const params = [];
        
        if (userFilter) {
            if (userFilter.department) {
                query += ' AND department LIKE ?';
                params.push(`%${userFilter.department}%`);
            }
            if (userFilter.position) {
                query += ' AND work_position LIKE ?';
                params.push(`%${userFilter.position}%`);
            }
        }
        
        const users = await database.db.all(query, ...params);
        
        logger.info(`–ù–∞—á–∞–ª–æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        let sent = 0;
        let errors = 0;
        
        for (const user of users) {
            try {
                await bot.sendMessage(user.bitrix_id, message);
                sent++;
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await new Promise(resolve => 
                    setTimeout(resolve, config.bot.delayBetweenMessages)
                );
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.bitrix_id}:`, error);
                errors++;
            }
        }
        
        logger.success(`–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
        
        return {
            total: users.length,
            sent,
            errors
        };
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        throw error;
    }
}
