import bot from './bot.js';
import database from '../utils/database.js';
import logger from '../utils/logger.js';
import config from '../utils/config.js';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
 */
export async function fetchUsersFromBitrix() {
    try {
        await bot.initialize();
        
        logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24...');
        
        const result = await bot.$b24.callMethod('user.get', {
            ACTIVE: true,
            FILTER: {
                USER_TYPE: 'employee' // –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
            }
        });
        
        const users = result._data?.result || result.getData() || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–æ—Ç–æ–≤
        const filteredUsers = users.filter(user => {
            return !user.EMAIL?.includes('no-reply@') && 
                   !user.EMAIL?.includes('bot@') &&
                   !user.EMAIL?.includes('system@') &&
                   user.ACTIVE === true &&
                   user.ID !== '0' &&
                   user.ID !== 0;
        });
        
        logger.info(`–ü–æ–ª—É—á–µ–Ω–æ ${filteredUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24`);
        
        return filteredUsers;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24:', error);
        throw error;
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
export async function syncUsers() {
    try {
        logger.info('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
        const bitrixUsers = await fetchUsersFromBitrix();
        
        let synced = 0;
        let errors = 0;
        
        for (const user of bitrixUsers) {
            try {
                await database.saveUser({
                    bitrix_id: user.ID,
                    name: `${user.NAME || ''} ${user.LAST_NAME || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    first_name: user.NAME || '',
                    last_name: user.LAST_NAME || '',
                    email: user.EMAIL || '',
                    work_position: user.WORK_POSITION || '',
                    department: Array.isArray(user.UF_DEPARTMENT) 
                        ? user.UF_DEPARTMENT.join(',') 
                        : (user.UF_DEPARTMENT || '')
                });
                synced++;
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.ID}:`, error);
                errors++;
            }
        }
        
        logger.success(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${synced} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
        
        return {
            total: bitrixUsers.length,
            synced,
            errors
        };
    } catch (error) {
        logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
 */
export async function getActiveUsersForGreeting() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        const users = await database.getUsersForMorningGreeting();
        
        logger.info(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è`);
        
        return users;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export async function updateUser(userId, updates) {
    try {
        const updateFields = [];
        const values = [];
        
        if (updates.name !== undefined) {
            updateFields.push('name = ?');
            values.push(updates.name);
        }
        
        if (updates.is_active !== undefined) {
            updateFields.push('is_active = ?');
            values.push(updates.is_active ? 1 : 0);
        }
        
        if (updates.email !== undefined) {
            updateFields.push('email = ?');
            values.push(updates.email);
        }
        
        if (updates.work_position !== undefined) {
            updateFields.push('work_position = ?');
            values.push(updates.work_position);
        }
        
        if (updateFields.length === 0) {
            return false;
        }
        
        updateFields.push('updated_at = CURRENT_TIMESTAMP');
        values.push(userId);
        
        await database.db.run(`
            UPDATE users 
            SET ${updateFields.join(', ')}
            WHERE bitrix_id = ?
        `, ...values);
        
        logger.info(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        return true;
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
export async function getUserStats() {
    try {
        const stats = await database.db.get(`
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active,
                SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) as inactive,
                SUM(CASE WHEN DATE(last_greeting_sent) = DATE('now') THEN 1 ELSE 0 END) as greeted_today
            FROM users
        `);
        
        return {
            total: stats.total || 0,
            active: stats.active || 0,
            inactive: stats.inactive || 0,
            greetedToday: stats.greeted_today || 0
        };
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        throw error;
    }
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 */
export async function findUserById(userId) {
    try {
        return await database.db.get(`
            SELECT * FROM users 
            WHERE bitrix_id = ?
        `, userId);
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        throw error;
    }
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export async function bulkUpdateUsersStatus(userIds, isActive) {
    try {
        const placeholders = userIds.map(() => '?').join(',');
        
        await database.db.run(`
            UPDATE users 
            SET is_active = ?, updated_at = CURRENT_TIMESTAMP
            WHERE bitrix_id IN (${placeholders})
        `, isActive ? 1 : 0, ...userIds);
        
        logger.info(`–°—Ç–∞—Ç—É—Å ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ${isActive ? '–∞–∫—Ç–∏–≤–Ω—ã–π' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}`);
        
        return true;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        throw error;
    }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export async function exportUsers(format = 'json') {
    try {
        const users = await database.db.all(`
            SELECT 
                bitrix_id,
                name,
                email,
                work_position,
                department,
                is_active,
                last_greeting_sent,
                created_at
            FROM users
            ORDER BY name
        `);
        
        if (format === 'csv') {
            // –§–æ—Ä–º–∏—Ä—É–µ–º CSV
            const headers = ['ID', '–ò–º—è', 'Email', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û—Ç–¥–µ–ª', '–ê–∫—Ç–∏–≤–µ–Ω', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'];
            const rows = users.map(user => [
                user.bitrix_id,
                user.name,
                user.email,
                user.work_position,
                user.department,
                user.is_active ? '–î–∞' : '–ù–µ—Ç',
                user.last_greeting_sent || '–ù–∏–∫–æ–≥–¥–∞',
                user.created_at
            ]);
            
            const csv = [headers, ...rows]
                .map(row => row.map(cell => `"${cell || ''}"`).join(','))
                .join('\n');
                
            return csv;
        }
        
        return users;
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        throw error;
    }
}

/**
 * –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
 */
export async function importUsers(users) {
    try {
        let imported = 0;
        let errors = 0;
        
        for (const user of users) {
            try {
                await database.saveUser({
                    bitrix_id: user.bitrix_id || user.id,
                    name: user.name,
                    first_name: user.first_name || '',
                    last_name: user.last_name || '',
                    email: user.email || '',
                    work_position: user.work_position || '',
                    department: user.department || ''
                });
                imported++;
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error);
                errors++;
            }
        }
        
        logger.success(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${imported} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
        
        return {
            imported,
            errors
        };
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        throw error;
    }
}
