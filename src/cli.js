#!/usr/bin/env node

import { Command } from 'commander';
import inquirer from 'inquirer';
import chalk from 'chalk';
import ora from 'ora';
import Table from 'cli-table3';
import dotenv from 'dotenv';

// –£—Ç–∏–ª–∏—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
import config from './utils/config.js';
import database from './utils/database.js';
import bot from './functions/bot.js';
import { syncUsers, getUserStats, exportUsers } from './functions/users.js';
import { sendMorningGreetings, sendTestGreeting, sendBroadcastMessage } from './functions/greetings.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞—ë–º CLI –ø—Ä–æ–≥—Ä–∞–º–º—É
const program = new Command();

program
    .name('bot-cli')
    .description('CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –ë–∏—Ç—Ä–∏–∫—Å24')
    .version('1.0.0');

// –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
program
    .command('register')
    .description('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24')
    .action(async () => {
        const spinner = ora('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–∏—Ç—Ä–∏–∫—Å24...').start();
        
        try {
            await database.connect();
            await bot.initialize();
            
            spinner.stop();
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞
            const answers = await inquirer.prompt([
                {
                    type: 'input',
                    name: 'name',
                    message: '–ò–º—è –±–æ—Ç–∞:',
                    default: '–ë–æ—Ç —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π'
                },
                {
                    type: 'input',
                    name: 'code',
                    message: '–ö–æ–¥ –±–æ—Ç–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π):',
                    default: 'morning_greeting_bot'
                },
                {
                    type: 'input',
                    name: 'position',
                    message: '–î–æ–ª–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞:',
                    default: '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'
                },
                {
                    type: 'list',
                    name: 'color',
                    message: '–¶–≤–µ—Ç –±–æ—Ç–∞:',
                    choices: ['GREEN', 'RED', 'BLUE', 'ORANGE', 'PURPLE'],
                    default: 'GREEN'
                }
            ]);
            
            spinner.start('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞...');
            
            const result = await bot.registerBot(answers);
            
            spinner.succeed(chalk.green('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!'));
            
            console.log(chalk.cyan('\nüìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:'));
            console.log(`   ID: ${chalk.yellow(result.botId)}`);
            console.log(`   –ò–º—è: ${result.botName}`);
            console.log(`   –ö–æ–¥: ${result.botCode}`);
            
            if (result.alreadyExists) {
                console.log(chalk.yellow('\n‚ö†Ô∏è –ë–æ—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'));
            }
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞
program
    .command('unregister')
    .description('–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24')
    .action(async () => {
        const confirm = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'sure',
                message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞?',
                default: false
            }
        ]);
        
        if (!confirm.sure) {
            console.log(chalk.yellow('–û—Ç–º–µ–Ω–µ–Ω–æ'));
            return;
        }
        
        const spinner = ora('–£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞...').start();
        
        try {
            await database.connect();
            await bot.initialize();
            
            const result = await bot.unregisterBot();
            
            if (result) {
                spinner.succeed(chalk.green('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω'));
            } else {
                spinner.fail(chalk.red('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞'));
            }
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
program
    .command('sync-users')
    .description('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ë–∏—Ç—Ä–∏–∫—Å24')
    .action(async () => {
        const spinner = ora('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...').start();
        
        try {
            await database.connect();
            await bot.initialize();
            
            const result = await syncUsers();
            
            spinner.succeed(chalk.green('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'));
            
            console.log(chalk.cyan('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:'));
            console.log(`   –í—Å–µ–≥–æ: ${chalk.yellow(result.total)}`);
            console.log(`   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${chalk.green(result.synced)}`);
            console.log(`   –û—à–∏–±–æ–∫: ${chalk.red(result.errors)}`);
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
program
    .command('list-users')
    .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    .option('-a, --all', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)')
    .action(async (options) => {
        const spinner = ora('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...').start();
        
        try {
            await database.connect();
            
            const query = options.all 
                ? 'SELECT * FROM users ORDER BY name'
                : 'SELECT * FROM users WHERE is_active = 1 ORDER BY name';
                
            const users = await database.db.all(query);
            
            spinner.stop();
            
            if (users.length === 0) {
                console.log(chalk.yellow('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'));
                return;
            }
            
            // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
            const table = new Table({
                head: ['ID', '–ò–º—è', 'Email', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ê–∫—Ç–∏–≤–µ–Ω', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'],
                colWidths: [10, 25, 30, 20, 10, 20]
            });
            
            users.forEach(user => {
                table.push([
                    user.bitrix_id,
                    user.name || '-',
                    user.email || '-',
                    user.work_position || '-',
                    user.is_active ? chalk.green('‚úì') : chalk.red('‚úó'),
                    user.last_greeting_sent 
                        ? new Date(user.last_greeting_sent).toLocaleDateString('ru-RU')
                        : '–ù–∏–∫–æ–≥–¥–∞'
                ]);
            });
            
            console.log(table.toString());
            console.log(chalk.cyan(`\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`));
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
program
    .command('send-greetings')
    .description('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ–π—á–∞—Å')
    .action(async () => {
        const confirm = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'sure',
                message: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?',
                default: false
            }
        ]);
        
        if (!confirm.sure) {
            console.log(chalk.yellow('–û—Ç–º–µ–Ω–µ–Ω–æ'));
            return;
        }
        
        const spinner = ora('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π...').start();
        
        try {
            await database.connect();
            await bot.initialize();
            
            const result = await sendMorningGreetings();
            
            spinner.succeed(chalk.green('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'));
            
            console.log(chalk.cyan('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:'));
            console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${chalk.yellow(result.total)}`);
            console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${chalk.green(result.sent)}`);
            console.log(`   –û—à–∏–±–æ–∫: ${chalk.red(result.errors)}`);
            
            const successRate = result.total > 0 
                ? ((result.sent / result.total) * 100).toFixed(2)
                : 0;
            console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${chalk.cyan(successRate + '%')}`);
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
program
    .command('test-greeting <userId>')
    .description('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    .action(async (userId) => {
        const spinner = ora('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è...').start();
        
        try {
            await database.connect();
            await bot.initialize();
            
            const result = await sendTestGreeting(userId);
            
            spinner.succeed(chalk.green('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'));
            
            console.log(chalk.cyan('\nüìå –î–µ—Ç–∞–ª–∏:'));
            console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.userName} (ID: ${result.userId})`);
            console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message.substring(0, 100)}...`);
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
program
    .command('broadcast')
    .description('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    .action(async () => {
        const answers = await inquirer.prompt([
            {
                type: 'editor',
                name: 'message',
                message: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'
            },
            {
                type: 'confirm',
                name: 'confirm',
                message: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?',
                default: false
            }
        ]);
        
        if (!answers.confirm) {
            console.log(chalk.yellow('–û—Ç–º–µ–Ω–µ–Ω–æ'));
            return;
        }
        
        const spinner = ora('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...').start();
        
        try {
            await database.connect();
            await bot.initialize();
            
            const result = await sendBroadcastMessage(answers.message);
            
            spinner.succeed(chalk.green('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'));
            
            console.log(chalk.cyan('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:'));
            console.log(`   –í—Å–µ–≥–æ: ${chalk.yellow(result.total)}`);
            console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${chalk.green(result.sent)}`);
            console.log(`   –û—à–∏–±–æ–∫: ${chalk.red(result.errors)}`);
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
program
    .command('stats')
    .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞')
    .option('-d, --days <number>', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', '7')
    .action(async (options) => {
        const spinner = ora('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...').start();
        
        try {
            await database.connect();
            await bot.initialize();
            
            spinner.stop();
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const userStats = await getUserStats();
            
            console.log(chalk.cyan('\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'));
            console.log(`   –í—Å–µ–≥–æ: ${chalk.yellow(userStats.total)}`);
            console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${chalk.green(userStats.active)}`);
            console.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${chalk.red(userStats.inactive)}`);
            console.log(`   –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è: ${chalk.cyan(userStats.greetedToday)}`);
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            const messageStats = await database.getMessageStats(parseInt(options.days));
            
            if (messageStats.length > 0) {
                console.log(chalk.cyan(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ ${options.days} –¥–Ω–µ–π:`));
                
                const table = new Table({
                    head: ['–î–∞—Ç–∞', '–í—Å–µ–≥–æ', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–æ–∫'],
                    colWidths: [15, 10, 15, 10]
                });
                
                messageStats.forEach(stat => {
                    table.push([
                        new Date(stat.date).toLocaleDateString('ru-RU'),
                        stat.total,
                        chalk.green(stat.sent),
                        stat.errors > 0 ? chalk.red(stat.errors) : '0'
                    ]);
                });
                
                console.log(table.toString());
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            const botInfo = await bot.getBotInfo();
            if (botInfo) {
                console.log(chalk.cyan('\nü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:'));
                console.log(`   ID: ${chalk.yellow(botInfo.ID)}`);
                console.log(`   –ò–º—è: ${botInfo.NAME}`);
                console.log(`   –ö–æ–¥: ${botInfo.CODE}`);
            }
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
program
    .command('export-users')
    .description('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    .option('-f, --format <format>', '–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json/csv)', 'json')
    .option('-o, --output <file>', '–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    .action(async (options) => {
        const spinner = ora('–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...').start();
        
        try {
            await database.connect();
            
            const data = await exportUsers(options.format);
            
            if (options.output) {
                const fs = await import('fs/promises');
                await fs.writeFile(options.output, 
                    typeof data === 'string' ? data : JSON.stringify(data, null, 2)
                );
                spinner.succeed(chalk.green(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ ${options.output}`));
            } else {
                spinner.stop();
                console.log(data);
            }
            
        } catch (error) {
            spinner.fail(chalk.red('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞'));
            console.error(chalk.red(error.message));
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
program
    .command('schedule')
    .description('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π')
    .action(async () => {
        try {
            await database.connect();
            
            const current = await database.getScheduleSettings();
            
            console.log(chalk.cyan('\nüìÖ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:'));
            if (current) {
                console.log(`   –í—Ä–µ–º—è: ${current.hour}:${String(current.minute).padStart(2, '0')}`);
                console.log(`   –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: ${current.days_of_week}`);
                console.log(`   –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${current.timezone}`);
                console.log(`   –ê–∫—Ç–∏–≤–Ω–æ: ${current.is_active ? chalk.green('–î–∞') : chalk.red('–ù–µ—Ç')}`);
                
                if (current.last_run) {
                    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${new Date(current.last_run).toLocaleString('ru-RU')}`);
                }
            }
            
            const change = await inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'change',
                    message: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?',
                    default: false
                }
            ]);
            
            if (change.change) {
                const answers = await inquirer.prompt([
                    {
                        type: 'input',
                        name: 'hour',
                        message: '–ß–∞—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ (0-23):',
                        default: current?.hour || 9,
                        validate: (value) => {
                            const num = parseInt(value);
                            return (num >= 0 && num <= 23) || '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23';
                        }
                    },
                    {
                        type: 'input',
                        name: 'minute',
                        message: '–ú–∏–Ω—É—Ç—ã (0-59):',
                        default: current?.minute || 0,
                        validate: (value) => {
                            const num = parseInt(value);
                            return (num >= 0 && num <= 59) || '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 59';
                        }
                    },
                    {
                        type: 'checkbox',
                        name: 'days',
                        message: '–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:',
                        choices: [
                            { name: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', value: 1, checked: true },
                            { name: '–í—Ç–æ—Ä–Ω–∏–∫', value: 2, checked: true },
                            { name: '–°—Ä–µ–¥–∞', value: 3, checked: true },
                            { name: '–ß–µ—Ç–≤–µ—Ä–≥', value: 4, checked: true },
                            { name: '–ü—è—Ç–Ω–∏—Ü–∞', value: 5, checked: true },
                            { name: '–°—É–±–±–æ—Ç–∞', value: 6, checked: false },
                            { name: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', value: 0, checked: false }
                        ]
                    }
                ]);
                
                await database.db.run(`
                    UPDATE schedule_settings
                    SET hour = ?, minute = ?, days_of_week = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE schedule_type = 'morning_greeting'
                `, answers.hour, answers.minute, answers.days.join(','));
                
                console.log(chalk.green('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã'));
                console.log(chalk.yellow('‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'));
            }
            
        } catch (error) {
            console.error(chalk.red('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:'), error.message);
            process.exit(1);
        } finally {
            await database.close();
        }
    });

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
program.parse(process.argv);
