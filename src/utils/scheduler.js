import cron from 'node-cron';
import logger from './logger.js';
import config from './config.js';
import database from './database.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á
 */
class Scheduler {
    constructor() {
        this.jobs = new Map();
        this.isRunning = false;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
     */
    async start() {
        if (this.isRunning) {
            logger.warn('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        logger.info('üïê –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...');
        this.isRunning = true;

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ë–î
        const scheduleSettings = await database.getScheduleSettings('morning_greeting');
        
        if (scheduleSettings && scheduleSettings.is_active) {
            await this.scheduleMorningGreeting(scheduleSettings);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            await this.scheduleMorningGreetingFromConfig();
        }

        logger.success('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω');
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
     */
    async scheduleMorningGreeting(settings) {
        const { hour, minute, days_of_week } = settings;
        const daysArray = days_of_week.split(',').map(d => parseInt(d.trim()));
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ cron —Ñ–æ—Ä–º–∞—Ç
        const cronDays = daysArray.join(',');
        const cronExpression = `${minute} ${hour} * * ${cronDays}`;

        await this.scheduleJob('morning_greeting', cronExpression, async () => {
            logger.info('‚è∞ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è');
            
            try {
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
                const { sendMorningGreetings } = await import('../functions/greetings.js');
                await sendMorningGreetings();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                await database.updateLastRun('morning_greeting');
                
                logger.success('–ó–∞–¥–∞—á–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
            }
        });
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
     */
    async scheduleMorningGreetingFromConfig() {
        const { hour, minute, daysOfWeek } = config.schedule.morningGreeting;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ cron —Ñ–æ—Ä–º–∞—Ç
        const cronDays = daysOfWeek.join(',');
        const cronExpression = `${minute} ${hour} * * ${cronDays}`;

        await this.scheduleJob('morning_greeting', cronExpression, async () => {
            logger.info('‚è∞ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)');
            
            try {
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
                const { sendMorningGreetings } = await import('../functions/greetings.js');
                await sendMorningGreetings();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                await database.updateLastRun('morning_greeting');
                
                logger.success('–ó–∞–¥–∞—á–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
     */
    async scheduleJob(name, cronExpression, handler) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.jobs.has(name)) {
            this.jobs.get(name).stop();
            logger.info(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞: ${name}`);
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        const job = cron.schedule(cronExpression, handler, {
            scheduled: true,
            timezone: config.schedule.morningGreeting.timezone
        });

        this.jobs.set(name, job);
        logger.info(`üìÖ –ó–∞–¥–∞—á–∞ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${cronExpression}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const nextRun = this.getNextRunTime(cronExpression);
        if (nextRun) {
            logger.info(`–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ "${name}": ${nextRun.toLocaleString('ru-RU')}`);
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    getNextRunTime(cronExpression) {
        try {
            const interval = cron.parseExpression(cronExpression, {
                tz: config.schedule.morningGreeting.timezone
            });
            return interval.next().toDate();
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
            return null;
        }
    }

    /**
     * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
     */
    async runJob(name) {
        const job = this.jobs.get(name);
        if (job) {
            logger.info(`üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: ${name}`);
            job.now();
        } else {
            logger.warn(`–ó–∞–¥–∞—á–∞ "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
     */
    stopJob(name) {
        const job = this.jobs.get(name);
        if (job) {
            job.stop();
            this.jobs.delete(name);
            logger.info(`‚èπÔ∏è –ó–∞–¥–∞—á–∞ "${name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
     */
    stopAll() {
        for (const [name, job] of this.jobs) {
            job.stop();
            logger.info(`‚èπÔ∏è –ó–∞–¥–∞—á–∞ "${name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        }
        this.jobs.clear();
        this.isRunning = false;
        logger.info('–í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    getActiveJobs() {
        const jobs = [];
        for (const [name, job] of this.jobs) {
            jobs.push({
                name,
                running: job.running !== undefined ? job.running : true
            });
        }
        return jobs;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async scheduleDailyUserSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00
        const cronExpression = '0 2 * * *';
        
        await this.scheduleJob('user_sync', cronExpression, async () => {
            logger.info('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            try {
                const { syncUsers } = await import('../functions/users.js');
                await syncUsers();
                logger.success('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
     */
    async scheduleLogCleanup() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00
        const cronExpression = '0 3 * * 0';
        
        await this.scheduleJob('log_cleanup', cronExpression, async () => {
            logger.info('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤');
            
            try {
                // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
                const thirtyDaysAgo = new Date();
                thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                
                await database.db.run(`
                    DELETE FROM message_history 
                    WHERE sent_at < ?
                `, thirtyDaysAgo.toISOString());
                
                logger.success('–°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
            }
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const scheduler = new Scheduler();
export default scheduler;
